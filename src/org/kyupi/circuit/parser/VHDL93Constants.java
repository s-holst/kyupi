/* Generated By:JavaCC: Do not edit this line. VHDL93Constants.java */
package org.kyupi.circuit.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface VHDL93Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMMENT = 5;
  /** RegularExpression Id. */
  int ABS = 6;
  /** RegularExpression Id. */
  int ACCESS = 7;
  /** RegularExpression Id. */
  int ACROSS = 8;
  /** RegularExpression Id. */
  int AFTER = 9;
  /** RegularExpression Id. */
  int ALIAS = 10;
  /** RegularExpression Id. */
  int ALL = 11;
  /** RegularExpression Id. */
  int AND = 12;
  /** RegularExpression Id. */
  int ARCHITECTURE = 13;
  /** RegularExpression Id. */
  int ARRAY = 14;
  /** RegularExpression Id. */
  int ASSERT = 15;
  /** RegularExpression Id. */
  int ATTRIBUTE = 16;
  /** RegularExpression Id. */
  int BEGIN = 17;
  /** RegularExpression Id. */
  int BLOCK = 18;
  /** RegularExpression Id. */
  int BODY = 19;
  /** RegularExpression Id. */
  int BUFFER = 20;
  /** RegularExpression Id. */
  int BUS = 21;
  /** RegularExpression Id. */
  int CASE = 22;
  /** RegularExpression Id. */
  int COMPONENT = 23;
  /** RegularExpression Id. */
  int CONFIGURATION = 24;
  /** RegularExpression Id. */
  int CONSTANT = 25;
  /** RegularExpression Id. */
  int DISCONNECT = 26;
  /** RegularExpression Id. */
  int DOWNTO = 27;
  /** RegularExpression Id. */
  int ELSE = 28;
  /** RegularExpression Id. */
  int ELSIF = 29;
  /** RegularExpression Id. */
  int END = 30;
  /** RegularExpression Id. */
  int ENTITY = 31;
  /** RegularExpression Id. */
  int EXIT = 32;
  /** RegularExpression Id. */
  int FILE = 33;
  /** RegularExpression Id. */
  int FOR = 34;
  /** RegularExpression Id. */
  int FUNCTION = 35;
  /** RegularExpression Id. */
  int GENERATE = 36;
  /** RegularExpression Id. */
  int GENERIC = 37;
  /** RegularExpression Id. */
  int GROUP = 38;
  /** RegularExpression Id. */
  int GUARDED = 39;
  /** RegularExpression Id. */
  int IF = 40;
  /** RegularExpression Id. */
  int IMPURE = 41;
  /** RegularExpression Id. */
  int IN = 42;
  /** RegularExpression Id. */
  int INERTIAL = 43;
  /** RegularExpression Id. */
  int INOUT = 44;
  /** RegularExpression Id. */
  int IS = 45;
  /** RegularExpression Id. */
  int LABEL = 46;
  /** RegularExpression Id. */
  int LIBRARY = 47;
  /** RegularExpression Id. */
  int LINKAGE = 48;
  /** RegularExpression Id. */
  int LITERAL = 49;
  /** RegularExpression Id. */
  int LOOP = 50;
  /** RegularExpression Id. */
  int MAP = 51;
  /** RegularExpression Id. */
  int MOD = 52;
  /** RegularExpression Id. */
  int NAND = 53;
  /** RegularExpression Id. */
  int NEW = 54;
  /** RegularExpression Id. */
  int NEXT = 55;
  /** RegularExpression Id. */
  int NOISE = 56;
  /** RegularExpression Id. */
  int NOR = 57;
  /** RegularExpression Id. */
  int NOT = 58;
  /** RegularExpression Id. */
  int NULL = 59;
  /** RegularExpression Id. */
  int OF = 60;
  /** RegularExpression Id. */
  int ON = 61;
  /** RegularExpression Id. */
  int OPEN = 62;
  /** RegularExpression Id. */
  int OR = 63;
  /** RegularExpression Id. */
  int OTHERS = 64;
  /** RegularExpression Id. */
  int OUT = 65;
  /** RegularExpression Id. */
  int PACKAGE = 66;
  /** RegularExpression Id. */
  int PORT = 67;
  /** RegularExpression Id. */
  int POSTPONED = 68;
  /** RegularExpression Id. */
  int PROCEDURAL = 69;
  /** RegularExpression Id. */
  int PROCEDURE = 70;
  /** RegularExpression Id. */
  int PROCESS = 71;
  /** RegularExpression Id. */
  int PROTECTED = 72;
  /** RegularExpression Id. */
  int PURE = 73;
  /** RegularExpression Id. */
  int QUANTITY = 74;
  /** RegularExpression Id. */
  int RANGE = 75;
  /** RegularExpression Id. */
  int RECORD = 76;
  /** RegularExpression Id. */
  int REFERENCE = 77;
  /** RegularExpression Id. */
  int REGISTER = 78;
  /** RegularExpression Id. */
  int REJECT = 79;
  /** RegularExpression Id. */
  int REM = 80;
  /** RegularExpression Id. */
  int REPORT = 81;
  /** RegularExpression Id. */
  int RETURN = 82;
  /** RegularExpression Id. */
  int ROL = 83;
  /** RegularExpression Id. */
  int ROR = 84;
  /** RegularExpression Id. */
  int SELECT = 85;
  /** RegularExpression Id. */
  int SEVERITY = 86;
  /** RegularExpression Id. */
  int SIGNAL = 87;
  /** RegularExpression Id. */
  int SHARED = 88;
  /** RegularExpression Id. */
  int SLA = 89;
  /** RegularExpression Id. */
  int SLL = 90;
  /** RegularExpression Id. */
  int SRA = 91;
  /** RegularExpression Id. */
  int SRL = 92;
  /** RegularExpression Id. */
  int SUBTYPE = 93;
  /** RegularExpression Id. */
  int THEN = 94;
  /** RegularExpression Id. */
  int TO = 95;
  /** RegularExpression Id. */
  int TRANSPORT = 96;
  /** RegularExpression Id. */
  int TYPE = 97;
  /** RegularExpression Id. */
  int UNAFFECTED = 98;
  /** RegularExpression Id. */
  int UNITS = 99;
  /** RegularExpression Id. */
  int UNTIL = 100;
  /** RegularExpression Id. */
  int USE = 101;
  /** RegularExpression Id. */
  int VARIABLE = 102;
  /** RegularExpression Id. */
  int WAIT = 103;
  /** RegularExpression Id. */
  int WHEN = 104;
  /** RegularExpression Id. */
  int WHILE = 105;
  /** RegularExpression Id. */
  int WITH = 106;
  /** RegularExpression Id. */
  int XNOR = 107;
  /** RegularExpression Id. */
  int XOR = 108;
  /** RegularExpression Id. */
  int upper_case_letter = 109;
  /** RegularExpression Id. */
  int lower_case_letter = 110;
  /** RegularExpression Id. */
  int digit = 111;
  /** RegularExpression Id. */
  int extended_digit = 112;
  /** RegularExpression Id. */
  int special_character = 113;
  /** RegularExpression Id. */
  int other_special_character = 114;
  /** RegularExpression Id. */
  int eother_special_character = 115;
  /** RegularExpression Id. */
  int format_effector = 116;
  /** RegularExpression Id. */
  int base_specifier = 117;
  /** RegularExpression Id. */
  int underline = 118;
  /** RegularExpression Id. */
  int letter = 119;
  /** RegularExpression Id. */
  int letter_or_digit = 120;
  /** RegularExpression Id. */
  int integer = 121;
  /** RegularExpression Id. */
  int base = 122;
  /** RegularExpression Id. */
  int based_integer = 123;
  /** RegularExpression Id. */
  int based_literal = 124;
  /** RegularExpression Id. */
  int basic_character = 125;
  /** RegularExpression Id. */
  int basic_graphic_character = 126;
  /** RegularExpression Id. */
  int basic_identifier = 127;
  /** RegularExpression Id. */
  int bit_string_literal = 128;
  /** RegularExpression Id. */
  int bit_value = 129;
  /** RegularExpression Id. */
  int character_literal = 130;
  /** RegularExpression Id. */
  int decimal_literal = 131;
  /** RegularExpression Id. */
  int exponent = 132;
  /** RegularExpression Id. */
  int extended_identifier = 133;
  /** RegularExpression Id. */
  int egraphic_character = 134;
  /** RegularExpression Id. */
  int graphic_character = 135;
  /** RegularExpression Id. */
  int string_literal = 136;
  /** RegularExpression Id. */
  int EXP = 137;
  /** RegularExpression Id. */
  int MUL = 138;
  /** RegularExpression Id. */
  int DIV = 139;
  /** RegularExpression Id. */
  int ADD = 140;
  /** RegularExpression Id. */
  int SUB = 141;
  /** RegularExpression Id. */
  int CONCAT = 142;
  /** RegularExpression Id. */
  int EQ = 143;
  /** RegularExpression Id. */
  int NEQ = 144;
  /** RegularExpression Id. */
  int GE = 145;
  /** RegularExpression Id. */
  int LE = 146;
  /** RegularExpression Id. */
  int GT = 147;
  /** RegularExpression Id. */
  int LO = 148;
  /** RegularExpression Id. */
  int SEMICOLON = 149;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\t\"",
    "<COMMENT>",
    "\"abs\"",
    "\"access\"",
    "\"across\"",
    "\"after\"",
    "\"alias\"",
    "\"all\"",
    "\"and\"",
    "\"architecture\"",
    "\"array\"",
    "\"assert\"",
    "\"attribute\"",
    "\"begin\"",
    "\"block\"",
    "\"body\"",
    "\"buffer\"",
    "\"bus\"",
    "\"case\"",
    "\"component\"",
    "\"configuration\"",
    "\"constant\"",
    "\"disconnect\"",
    "\"downto\"",
    "\"else\"",
    "\"elsif\"",
    "\"end\"",
    "\"entity\"",
    "\"exit\"",
    "\"file\"",
    "\"for\"",
    "\"function\"",
    "\"generate\"",
    "\"generic\"",
    "\"group\"",
    "\"guarded\"",
    "\"if\"",
    "\"impure\"",
    "\"in\"",
    "\"inertial\"",
    "\"inout\"",
    "\"is\"",
    "\"label\"",
    "\"library\"",
    "\"linkage\"",
    "\"literal\"",
    "\"loop\"",
    "\"map\"",
    "\"mod\"",
    "\"nand\"",
    "\"new\"",
    "\"next\"",
    "\"noise\"",
    "\"nor\"",
    "\"not\"",
    "\"null\"",
    "\"of\"",
    "\"on\"",
    "\"open\"",
    "\"or\"",
    "\"others\"",
    "\"out\"",
    "\"package\"",
    "\"port\"",
    "\"postponed\"",
    "\"procedural\"",
    "\"procedure\"",
    "\"process\"",
    "\"protected\"",
    "\"pure\"",
    "\"quantity\"",
    "\"range\"",
    "\"record\"",
    "\"reference\"",
    "\"register\"",
    "\"reject\"",
    "\"rem\"",
    "\"report\"",
    "\"return\"",
    "\"rol\"",
    "\"ror\"",
    "\"select\"",
    "\"severity\"",
    "\"signal\"",
    "\"shared\"",
    "\"sla\"",
    "\"sll\"",
    "\"sra\"",
    "\"srl\"",
    "\"subtype\"",
    "\"then\"",
    "\"to\"",
    "\"transport\"",
    "\"type\"",
    "\"unaffected\"",
    "\"units\"",
    "\"until\"",
    "\"use\"",
    "\"variable\"",
    "\"wait\"",
    "\"when\"",
    "\"while\"",
    "\"with\"",
    "\"xnor\"",
    "\"xor\"",
    "<upper_case_letter>",
    "<lower_case_letter>",
    "<digit>",
    "<extended_digit>",
    "<special_character>",
    "<other_special_character>",
    "<eother_special_character>",
    "<format_effector>",
    "<base_specifier>",
    "\"_\"",
    "<letter>",
    "<letter_or_digit>",
    "<integer>",
    "<base>",
    "<based_integer>",
    "<based_literal>",
    "<basic_character>",
    "<basic_graphic_character>",
    "<basic_identifier>",
    "<bit_string_literal>",
    "<bit_value>",
    "<character_literal>",
    "<decimal_literal>",
    "<exponent>",
    "<extended_identifier>",
    "<egraphic_character>",
    "<graphic_character>",
    "<string_literal>",
    "\"**\"",
    "\"*\"",
    "\"/\"",
    "\"+\"",
    "\"-\"",
    "\"&\"",
    "\"=\"",
    "\"/=\"",
    "\">=\"",
    "\"<=\"",
    "\">\"",
    "\"<\"",
    "\";\"",
    "\",\"",
    "\":\"",
    "\"(\"",
    "\")\"",
    "\":=\"",
    "\"=>\"",
    "\"<>\"",
    "\"\\\'\"",
    "\".\"",
    "\"|\"",
  };

}
