/* Generated By:JavaCC: Do not edit this line. Verilog.java */
package org.kyupi.circuit.parser;

import java.util.*;
import java.io.*;
import org.apache.log4j.Logger;
import org.kyupi.circuit.parser.VerilogParseTree.*;

@SuppressWarnings("all")
public class Verilog implements VerilogConstants {

        private static Logger log = Logger.getLogger(Verilog.class);

        public static VerilogParseTree parse (InputStream is) throws IOException {
                Verilog parse = new Verilog(is);
                VerilogParseTree tree = new VerilogParseTree();
                try {
                        parse.file(tree);
                        return tree;
                } catch (ParseException e) {
                        throw new IOException(e);
                } catch (TokenMgrError e) {
                        throw new IOException(e);
                }
        }

  final public void file(VerilogParseTree tree) throws ParseException {
    label_1:
    while (true) {
      module(tree.newModule());
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODULE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  final public void module(Module module) throws ParseException {
    jj_consume_token(MODULE);
    module.moduleName = identifier();
    jj_consume_token(19);
    identifier_list(module.portNames);
    jj_consume_token(20);
    jj_consume_token(21);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INPUT:
      case OUTPUT:
      case TRISTATE:
      case WIRE:
      case ASSIGN:
      case basic_identifier:
      case extended_identifier:
      case 28:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      module_item(module);
    }
    jj_consume_token(ENDMODULE);
  }

  final public void module_item(Module module) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INPUT:
      jj_consume_token(INPUT);
      ranged_variable_list(module.newInputDeclaration());
      break;
    case OUTPUT:
      jj_consume_token(OUTPUT);
      ranged_variable_list(module.newOutputDeclaration());
      break;
    case TRISTATE:
      jj_consume_token(TRISTATE);
      ranged_variable_list(module.newTristateDeclaration());
      break;
    case WIRE:
      jj_consume_token(WIRE);
      ranged_variable_list(module.newWireDeclaration());
      break;
    case ASSIGN:
      jj_consume_token(ASSIGN);
              Assignment a = module.newAssignment();
      a.targetName = identifier();
      jj_consume_token(22);
      a.sourceName = identifier();
      break;
    case basic_identifier:
    case extended_identifier:
    case 28:
      module_instantiation(module.newModuleInstantiation());
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(21);
  }

  final public void ranged_variable_list(RangedVariableList rvl) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
      range(rvl.range);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    identifier_list(rvl.variableNames);
  }

  final public void module_instantiation(ModuleInstantiation mi) throws ParseException {
    mi.moduleName = identifier();
    mi.instanceName = identifier();
    jj_consume_token(19);
    list_of_module_connections(mi);
    jj_consume_token(20);
  }

  final public void list_of_module_connections(ModuleInstantiation mi) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 24:
      named_port_connection(mi.newPortConnection());
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 23:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        jj_consume_token(23);
        named_port_connection(mi.newPortConnection());
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  final public void named_port_connection(PortConnection pc) throws ParseException {
    jj_consume_token(24);
    pc.portName = identifier();
    jj_consume_token(19);
    pc.variableName = identifier();
    jj_consume_token(20);
  }

  final public void range(Range range) throws ParseException {
    jj_consume_token(25);
    range.start = integer();
    jj_consume_token(26);
    range.end = integer();
    jj_consume_token(27);
  }

  final public void identifier_list(Collection<String> list) throws ParseException {
  String id;
    id = identifier();
                   list.add(id);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      jj_consume_token(23);
      id = identifier();
                                                         list.add(id);
    }
  }

  final public int integer() throws ParseException {
  Token t;
    t = jj_consume_token(integer);
                {if (true) return Integer.parseInt(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public String identifier() throws ParseException {
  Token t,t2;
  String s;
  String suffix = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case basic_identifier:
      t = jj_consume_token(basic_identifier);
      break;
    case extended_identifier:
      t = jj_consume_token(extended_identifier);
      break;
    case 28:
      t = jj_consume_token(28);
      jj_consume_token(integer);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
      jj_consume_token(25);
      t2 = jj_consume_token(integer);
      jj_consume_token(27);
                                 suffix = "[" + t2.image + "]";
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
          s = t.image + suffix;
          if (s.startsWith("\u005c\u005c"))
              s = s.substring(1);
          s = s.replace(" ", "").replace("\u005cr", "").replace("\u005cn", "").replace("\u005ct", "");
          if (s.equals("1"))
                s = "##CONST1##";
          if (s.equals("0"))
                s = "##CONST0##";

          {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public VerilogTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x10061780,0x10061780,0x2000000,0x800000,0x1000000,0x800000,0x10060000,0x2000000,};
   }

  /** Constructor with InputStream. */
  public Verilog(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Verilog(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new VerilogTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Verilog(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new VerilogTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Verilog(VerilogTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(VerilogTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[29];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 29; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
